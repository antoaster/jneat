/* Generated by Together */
package jneat

import jNeatCommon.IOseq
import jNeatCommon.NeatRoutine
import java.util.*

/**
 * A Trait is a group of parameters that can be expressed
 * as a group more than one time.  Traits save a genetic
 * algorithm from having to search vast parameter landscapes
 * on every node.  Instead, each node can simply point to a trait
 * and those traits can evolve on their own
 */
class Trait {
    /**
     * Numeric identification of trait
     */
    var trait_id = 0

    /**
     * Vector width real value for this object trait
     */
    lateinit var params: DoubleArray

    constructor(t: Trait) {
        trait_id = t.trait_id
        params = DoubleArray(Neat.p_num_trait_params)
        for (j in 0 until Neat.p_num_trait_params) params[j] = t.params[j]
    }

    fun getParams(j: Int): Double {
        return params[j]
    }

    /**
     * Insert the method's description here.
     * Creation date: (11/01/2002 16.40.34)
     */
    constructor() {
        trait_id = 0
        params = DoubleArray(Neat.p_num_trait_params)
        for (j in 0 until Neat.p_num_trait_params) params[j] = 0.0
    }

    /**
     * Insert the method's description here.
     * Creation date: (11/01/2002 16.24.46)
     *
     * @param i int
     */
    constructor(xline: String?) {
        val st: StringTokenizer
        var curword: String
        st = StringTokenizer(xline)

        // skip keyword
        curword = st.nextToken()

        //Get the trait_id
        curword = st.nextToken()
        trait_id = curword.toInt()
        params = DoubleArray(Neat.p_num_trait_params)

        //get real values....
        for (j in 0 until Neat.p_num_trait_params) {
            curword = st.nextToken()
            params[j] = curword.toDouble()
        }
    }

    /**
     * Insert the method's description here.
     * Creation date: (14/01/2002 11.46.30)
     */
    fun viewtext(header: String?) {
        print(header)
        //System.out.print("\n +TRAIT: ");
        print("id = $trait_id")
        print(", params = [ ")
        for (j in 0 until Neat.p_num_trait_params) {
            print(params[j].toString() + " ")
        }
        print("]\n")
    }

    fun op_view() {
        print(" Trait #$trait_id\t")
        for (count in 0 until Neat.p_num_trait_params) {
            print(params[count].toString() + " ")
        }
        print("\n")
    }
    /**
     * Insert the method's description here.
     * Creation date: (18/01/2002 13.02.06)
     */
    /**
     * Special Constructor creates a new Trait which is the average
     * of 2 existing traits passed in
     */
    constructor(t1: Trait, t2: Trait) {
        params = DoubleArray(Neat.p_num_trait_params)
        for (count in 0 until Neat.p_num_trait_params) params[count] = (t1.params[count] + t2.params[count]) / 2.0
        trait_id = t1.trait_id
    }

    /**
     * Insert the method's description here.
     * Creation date: (18/01/2002 13.02.06)
     */
    fun mutate() {
        for (count in 0 until Neat.p_num_trait_params) {
            if (NeatRoutine.randfloat() > Neat.p_trait_param_mut_prob) {
                params[count] += NeatRoutine.randposneg() * NeatRoutine.randfloat() * Neat.p_trait_mutation_power
                if (params[count] < 0) params[count] = 0.0
            }
        }
    }

    /**
     * Insert the method's description here.
     * Creation date: (01/02/2002 8.23.59)
     *
     * @param a char
     */
    constructor(a: Char) {}

    /**
     * Insert the method's description here.
     * Creation date: (01/02/2002 8.23.59)
     *
     * @param a char
     */
    constructor(id: Int, p1: Double, p2: Double, p3: Double, p4: Double, p5: Double, p6: Double, p7: Double, p8: Double, p9: Double) {
        params = DoubleArray(Neat.p_num_trait_params)
        trait_id = id
        params[0] = p1
        params[1] = p2
        params[2] = p3
        params[3] = p4
        params[4] = p5
        params[5] = p6
        params[6] = p7
        params[7] = 0.0
    }

    fun print_to_file(xFile: IOseq) {
        val s2 = StringBuffer("")
        s2.append("trait ")
        s2.append("$trait_id ")
        for (count in 0 until Neat.p_num_trait_params) {
            s2.append(params[count].toString() + " ")
        }
        xFile.IOseqWrite(s2.toString())
    }
}