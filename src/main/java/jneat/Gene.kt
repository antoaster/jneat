/* Generated by Together */
package jneat

import jNeatCommon.IOseq
import java.text.DecimalFormat
import java.util.*

/* Generated by Together */ /**
 * Is a genetic codification of gene;
 */
class Gene : Neat {
    var lnk: Link? = null

    var innovation_num = 0.0

    var mutation_num = 0.0

    var enable = false

    constructor(g: Gene, tp: Trait?, inode: NNode, onode: NNode) {
        lnk = Link(tp, g.lnk!!.weight, inode, onode, g.lnk!!.is_recurrent)
        innovation_num = g.innovation_num
        mutation_num = g.mutation_num
        enable = g.enable
    }

    constructor(xline: String?, traits: List<Trait>, nodes: List<NNode>) {
        val st: StringTokenizer
        var curword: String
        st = StringTokenizer(xline)
        var inode: NNode? = null
        var onode: NNode? = null
        val itr_trait: Iterator<*>
        val itr_node: Iterator<*>

        //skip keyword 'gene'
        curword = st.nextToken()

        //Get trait_id
        curword = st.nextToken()
        val trait_num = curword.toInt()

        //Get input node
        curword = st.nextToken()
        val inode_num = curword.toInt()

        //Get output node
        curword = st.nextToken()
        val onode_num = curword.toInt()

        //Get weight
        curword = st.nextToken()
        val weight = curword.toDouble()

        //Get recur
        curword = st.nextToken()
        val recur = if (curword.toInt() == 1) true else false

        //Get innovation num
        curword = st.nextToken()
        innovation_num = curword.toDouble()

        //Get mutation num
        curword = st.nextToken()
        mutation_num = curword.toDouble()

        //Get enable
        curword = st.nextToken()
        enable = if (curword.toInt() == 1) true else false
        var traitptr: Trait? = null
        if (trait_num > 0 && traits != null) {
            itr_trait = traits.iterator()
            while (itr_trait.hasNext()) {
                val _trait = itr_trait.next() as Trait
                if (_trait.trait_id == trait_num) {
                    traitptr = _trait
                    break
                }
            }
        }
        var fnd = 0
        itr_node = nodes.iterator()
        while (itr_node.hasNext() && fnd < 2) {
            val _node = itr_node.next() as NNode
            if (_node.node_id == inode_num) {
                inode = _node
                fnd++
            }
            if (_node.node_id == onode_num) {
                onode = _node
                fnd++
            }
        }
        lnk = Link(traitptr, weight, inode!!, onode!!, recur)
    }

    fun op_view() {
        val mask03 = " 0.000;-0.000"
        val fmt03 = DecimalFormat(mask03)
        val mask5 = " 0000"
        val fmt5 = DecimalFormat(mask5)
        print("""
 [Link (${fmt5.format(lnk!!.in_node.node_id.toLong())}""")
        print("," + fmt5.format(lnk!!.out_node.node_id.toLong()))
        print("]  innov (" + fmt5.format(innovation_num))
        print(", mut=" + fmt03.format(mutation_num) + ")")
        print(" Weight " + fmt03.format(lnk!!.weight))
        if (lnk!!.linktrait != null) print(" Link's trait_id " + lnk!!.linktrait!!.trait_id)
        if (enable == false) print(" -DISABLED-")
        if (lnk!!.is_recurrent) print(" -RECUR-")
    }

    constructor() {}
    constructor(tp: Trait?, w: Double, inode: NNode, onode: NNode, recur: Boolean, innov: Double, mnum: Double) {
        lnk = Link(tp, w, inode!!, onode!!, recur)
        innovation_num = innov
        mutation_num = mnum
        enable = true
    }

    fun print_to_file(xFile: IOseq) {
        val s2 = StringBuffer("")
        s2.append("gene ")
        if (lnk!!.linktrait != null) s2.append(" " + lnk!!.linktrait!!.trait_id) else s2.append(" 0")
        s2.append(" " + lnk!!.in_node.node_id)
        s2.append(" " + lnk!!.out_node.node_id)
        s2.append(" " + lnk!!.weight)
        if (lnk!!.is_recurrent) s2.append(" 1") else s2.append(" 0")
        s2.append(" $innovation_num")
        s2.append(" $mutation_num")
        if (enable) s2.append(" 1") else s2.append(" 0")
        xFile.IOseqWrite(s2.toString())
    }
    /**
     * Insert the method's description here.
     * Creation date: (24/01/2002 16.59.13)
     */
}