/* Generated by Together */
package jneat

/* Generated by Together */ /* Generated by Together */ /* Generated by Together */ /* Generated by Together */ /* Generated by Together */ /* Generated by Together */ /* Generated by Together */ /* Generated by Together */ /* Generated by Together */ /* Generated by Together */ /* Generated by Together */ /* Generated by Together */ /**
 * Organisms are Genomes and Networks with fitness information i.e. The genotype and phenotype together
 */
class Organism(
        /**
         * A measure of fitness for the Organism
         */
        var fitness: Double, xgenome: Genome, xgeneration: Int) : Neat() {

    var orig_fitness: Double

    var error: Double

    /**
     * Win marker (if needed for a particular task)
     */
    var winner: Boolean

    var net: Network

    var genome: Genome

    /**
     * The Organism's Species
     */
//    @JvmField
    var species: Species?

    /**
     * Number of children this Organism may have
     */
    @JvmField
    var expected_offspring: Double

    /**
     * Tells which generation this Organism is from
     */
    var generation: Int

    /**
     * Marker for destruction of inferior Organisms
     */
    @JvmField
    var eliminate: Boolean

    /**
     * Marks the species champ
     */
    @JvmField
    var champion: Boolean

    /**
     * Number of reserved offspring for a population leader
     */
    @JvmField
    var super_champ_offspring: Int

    /**
     * Marks the best in population
     */
    @JvmField
    var pop_champ: Boolean

    /**
     * Marks the duplicate child of a champion (for tracking purposes)
     */
    @JvmField
    var pop_champ_child: Boolean

    /**
     * DEBUG variable- high fitness of champ
     */
    @JvmField
    var high_fit: Double

    /**
     * has a change in a structure of baby ?
     */
    @JvmField
    var mut_struct_baby: Boolean

    /**
     * has a mating  in  baby ?
     */
    @JvmField
    var mate_baby: Boolean

    /**
     *
     */
    fun viewtext() {
        print("""
    
    -ORGANISM -[genomew_id=${genome.genome_id}]
    """.trimIndent())
        print(" Champ($champion)")
        print(", fit=$fitness")
        print(", Elim=$eliminate")
        print(", offspring=$expected_offspring")
    }

    /**
     *
     */
    init {
        orig_fitness = fitness
        genome = xgenome
        net = genome.genesis(xgenome.genome_id)
        species = null
        expected_offspring = 0.0
        generation = xgeneration
        eliminate = false
        error = 0.0
        winner = false
        champion = false
        super_champ_offspring = 0
        pop_champ = false
        pop_champ_child = false
        high_fit = 0.0
        mut_struct_baby = false
        mate_baby = false
    }
}